scalar Address
scalar Date

type TokenBalance {
  address: Address
  name: String
  amount: Int
  price: Int # Get it from an external API (+ Cached)
  value: Int # price * amount
}

# Could be a subset of a Member ? Or the other way arround ?
type Bank {
  address: Address
  total_shares: Int
  total_loot: Int
  total_value: Int # Present in the mapping Excel but not the front end spec
  token_balances: [TokenBalance]
  whitelisted_tokens: [Address] # Isn't this the same as the tokens present in the token_balances list ?
}

type Member {
  address: Address
  delegate_key: Address
  shares: Int
  loot: Int
  token_balances: [TokenBalance] # same as the bank's but amount = percentage_of_bank * bank_amount
  # Not used in the front end spec
  # withdraw_token_balances: [TokenBalance] # Empty unless the member ragequit (or kicked ?) so that he can withdraw them
  roles: [String]

  # calculated
  # join_date: Date # I added this, it's not present in the front end spec
  # AK: said it's not important for the moment, just skip it
  percentage_of_bank: Int # total_shares + total_loot / shares + loot
  voting_power: Int # total_shares / shares
}

enum Status {
  SUBMITTED
  ACCEPTED # Can proceed to execution if any actions
  # The remaining states are final
  REJECTED
  ABORTED # Did not go completely through voting
  EXECUTED # Execution is finalised and successful
  FAILED # Execution failed
  FORCED # Sent directly to grace period by admin
  NOTFOUND
}

enum StatusFront {
  VOTING_PERIOD
  GRACE_PERIOD
  TO_PROCESS
  PROCESSED
  REJECTED
}

enum ProposalType {
  WHITELIST
  SWAP
  SIGNALING
  ONBOARD
  ADD_SHARES
  UNWHITELIST
}

type Proposal {
  id: ID
  type: ProposalType
  title: string
  link: String
  submitted_by: Member
  submitted_at: Date
  accepted_at: Date
  processed_at: Date

  # Do we need to expose this alongside the StatusFront ?
  # They are not used anywhere in the front end spec
  status: Status
  description: String

  # ProposalParams
  majority: Int
  quorum: Int
  voting_duration: Int
  grace_duration: Int

  # calculated
  active: Boolean
  status_front: StatusFront
  time_remaining: Int
  current_majority: Int # yes_votes / (yes_votes + no_votes)
  current_quorum: Int # (yes_votes + no votes) / total_shares
  voting_period_ending_at: Date # submitted_at + voting_period
  grace_period_ending_at: Date # voting_period_ended_at + grace_period
  yes_votes: Int
  no_votes: Int
}

type GuildKick implements Proposal {
  member_address: Address
}

type OnBoard implements Proposal {
  address: Address
  shares: Int
  loot: Int
}

type WhiteList implements Proposal {
  token_address: Address
  token_name: String
}

type UnWhiteList implements Proposal {
  token_address: Address
  token_name: String
}

type Swap implements Proposal {
  tribute_address: Address
  tribute_offered: Int
  payment_requested: Address
  payment_requested: Int
}

enum OrderDirection {
  ASC
  DESC
}

type Query {
  # default value is null by default ?
  proposals(
    status: StatusFront
    order_by: String
    order_direction: OrderDirection
  ): [Proposal]
  proposal(id: ID!): Proposal # We don't have a proposal page in the font end spec
  members: [Member]
  member(address: Address): Member
  bank: Bank
}
